// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proje.Models;

#nullable disable

namespace Proje.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Proje.Models.ApplicaitonUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Proje.Models.Arac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AracAidiyetId")
                        .HasColumnType("int");

                    b.Property<int?>("AracModelId")
                        .HasColumnType("int");

                    b.Property<int?>("AracModelYili")
                        .HasColumnType("int");

                    b.Property<int?>("AracVitesTipiId")
                        .HasColumnType("int");

                    b.Property<int?>("AracYakitId")
                        .HasColumnType("int");

                    b.Property<int?>("Kilometre")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MuayeneTarihi")
                        .HasColumnType("Date");

                    b.Property<int?>("RenkId")
                        .HasColumnType("int");

                    b.Property<string>("ResmiPlaka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AracAidiyetId");

                    b.HasIndex("AracModelId");

                    b.HasIndex("AracVitesTipiId");

                    b.HasIndex("AracYakitId");

                    b.HasIndex("RenkId");

                    b.ToTable("arac");
                });

            modelBuilder.Entity("Proje.Models.AracAidiyet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aidiyet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("aracAidiyet");
                });

            modelBuilder.Entity("Proje.Models.AracBakim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<int>("Kilometre")
                        .HasColumnType("int");

                    b.Property<int>("PersonelSicil")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AracId");

                    b.HasIndex("PersonelSicil");

                    b.ToTable("aracBakim");
                });

            modelBuilder.Entity("Proje.Models.AracKategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Kategori")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("aracKategori");
                });

            modelBuilder.Entity("Proje.Models.AracKaza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<int>("PersonelSicil")
                        .HasColumnType("int");

                    b.Property<DateTime>("TarihSaat")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AracId");

                    b.HasIndex("PersonelSicil");

                    b.ToTable("aracKaza");
                });

            modelBuilder.Entity("Proje.Models.AracMarka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("aracMarka");
                });

            modelBuilder.Entity("Proje.Models.AracModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AracKategoriId")
                        .HasColumnType("int");

                    b.Property<int>("AracMarkaId")
                        .HasColumnType("int");

                    b.Property<string>("Detay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AracKategoriId");

                    b.HasIndex("AracMarkaId");

                    b.ToTable("aracModel");
                });

            modelBuilder.Entity("Proje.Models.AracSivilPlaka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<string>("SivilPlaka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AracId");

                    b.ToTable("aracSivilPlaka");
                });

            modelBuilder.Entity("Proje.Models.AracVitesTipi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Vites")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("aracVitesTipi");
                });

            modelBuilder.Entity("Proje.Models.AracYakit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Yakit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("aracYakit");
                });

            modelBuilder.Entity("Proje.Models.AracZimmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<int?>("AracTesellumSicil")
                        .HasColumnType("int");

                    b.Property<int?>("AracTeslimSicil")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tarih")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AracId");

                    b.HasIndex("AracTesellumSicil");

                    b.HasIndex("AracTeslimSicil");

                    b.ToTable("aracZimmet");
                });

            modelBuilder.Entity("Proje.Models.Buro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BuroAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("buro");
                });

            modelBuilder.Entity("Proje.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Proje.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("BinaryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TripleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Proje.Models.Demirbas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DemirbasCinsiId")
                        .HasColumnType("int");

                    b.Property<int>("DemirbasModelId")
                        .HasColumnType("int");

                    b.Property<string>("SeriNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DemirbasCinsiId");

                    b.HasIndex("DemirbasModelId");

                    b.ToTable("demirbas");
                });

            modelBuilder.Entity("Proje.Models.DemirbasCinsi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cinsi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("demirbasCins");
                });

            modelBuilder.Entity("Proje.Models.DemirbasMarka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("demirbasMarka");
                });

            modelBuilder.Entity("Proje.Models.DemirbasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DemirbasMarkaId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DemirbasMarkaId");

                    b.ToTable("demirbasModel");
                });

            modelBuilder.Entity("Proje.Models.DemirbasZimmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DemirbasId")
                        .HasColumnType("int");

                    b.Property<int>("DemirbasTesellumSicil")
                        .HasColumnType("int");

                    b.Property<int>("DemirbasTeslimSicil")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tarih")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DemirbasId");

                    b.HasIndex("DemirbasTesellumSicil");

                    b.HasIndex("DemirbasTeslimSicil");

                    b.ToTable("demirbasZimmet");
                });

            modelBuilder.Entity("Proje.Models.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictID"), 1L, 1);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownID")
                        .HasColumnType("int");

                    b.HasKey("DistrictID");

                    b.HasIndex("TownID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Proje.Models.Neighborhood", b =>
                {
                    b.Property<int>("NeighborhoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NeighborhoodID"), 1L, 1);

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("NeighborhoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NeighborhoodID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("Proje.Models.Personel", b =>
                {
                    b.Property<int>("Sicil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sicil"), 1L, 1);

                    b.Property<string>("AdSoyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuroId")
                        .HasColumnType("int");

                    b.Property<bool>("Cinsiyet")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DogumTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("RutbeID")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sicil");

                    b.HasIndex("BuroId");

                    b.HasIndex("RutbeID");

                    b.ToTable("personel");
                });

            modelBuilder.Entity("Proje.Models.Renk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Rengi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("renk");
                });

            modelBuilder.Entity("Proje.Models.Resimler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResimAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("resimler");
                });

            modelBuilder.Entity("Proje.Models.Rutbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RutbeAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("rutbe");
                });

            modelBuilder.Entity("Proje.Models.Town", b =>
                {
                    b.Property<int>("TownID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TownID"), 1L, 1);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TownID");

                    b.HasIndex("CityID");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Proje.Models.ApplicaitonUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Proje.Models.ApplicaitonUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.ApplicaitonUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Proje.Models.ApplicaitonUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Models.Arac", b =>
                {
                    b.HasOne("Proje.Models.AracAidiyet", "AracAidiyet")
                        .WithMany("Arac")
                        .HasForeignKey("AracAidiyetId");

                    b.HasOne("Proje.Models.AracModel", "AracModel")
                        .WithMany("Arac")
                        .HasForeignKey("AracModelId");

                    b.HasOne("Proje.Models.AracVitesTipi", "AracVitesTipi")
                        .WithMany("Arac")
                        .HasForeignKey("AracVitesTipiId");

                    b.HasOne("Proje.Models.AracYakit", "AracYakit")
                        .WithMany("Arac")
                        .HasForeignKey("AracYakitId");

                    b.HasOne("Proje.Models.Renk", "Renk")
                        .WithMany("Arac")
                        .HasForeignKey("RenkId");

                    b.Navigation("AracAidiyet");

                    b.Navigation("AracModel");

                    b.Navigation("AracVitesTipi");

                    b.Navigation("AracYakit");

                    b.Navigation("Renk");
                });

            modelBuilder.Entity("Proje.Models.AracBakim", b =>
                {
                    b.HasOne("Proje.Models.Arac", "Arac")
                        .WithMany("AracBakim")
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.Personel", "Personel")
                        .WithMany("AracBakim")
                        .HasForeignKey("PersonelSicil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arac");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Proje.Models.AracKaza", b =>
                {
                    b.HasOne("Proje.Models.Arac", "Arac")
                        .WithMany("AracKaza")
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.Personel", "Personel")
                        .WithMany("AracKaza")
                        .HasForeignKey("PersonelSicil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arac");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Proje.Models.AracModel", b =>
                {
                    b.HasOne("Proje.Models.AracKategori", "AracKategori")
                        .WithMany("AracModel")
                        .HasForeignKey("AracKategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.AracMarka", "AracMarka")
                        .WithMany("AracModel")
                        .HasForeignKey("AracMarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AracKategori");

                    b.Navigation("AracMarka");
                });

            modelBuilder.Entity("Proje.Models.AracSivilPlaka", b =>
                {
                    b.HasOne("Proje.Models.Arac", "Arac")
                        .WithMany("AracSivilPlaka")
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arac");
                });

            modelBuilder.Entity("Proje.Models.AracZimmet", b =>
                {
                    b.HasOne("Proje.Models.Arac", "Arac")
                        .WithMany("AracZimmet")
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.Personel", "AracTesellum")
                        .WithMany("AracZimmetTesellum")
                        .HasForeignKey("AracTesellumSicil");

                    b.HasOne("Proje.Models.Personel", "AracTeslim")
                        .WithMany("AracZimmetTeslim")
                        .HasForeignKey("AracTeslimSicil");

                    b.Navigation("Arac");

                    b.Navigation("AracTesellum");

                    b.Navigation("AracTeslim");
                });

            modelBuilder.Entity("Proje.Models.City", b =>
                {
                    b.HasOne("Proje.Models.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Proje.Models.Demirbas", b =>
                {
                    b.HasOne("Proje.Models.DemirbasCinsi", "DemirbasCinsi")
                        .WithMany("Demirbas")
                        .HasForeignKey("DemirbasCinsiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.DemirbasModel", "DemirbasModel")
                        .WithMany("Demirbas")
                        .HasForeignKey("DemirbasModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemirbasCinsi");

                    b.Navigation("DemirbasModel");
                });

            modelBuilder.Entity("Proje.Models.DemirbasModel", b =>
                {
                    b.HasOne("Proje.Models.DemirbasMarka", "DemirbasMarka")
                        .WithMany("DemirbasModel")
                        .HasForeignKey("DemirbasMarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemirbasMarka");
                });

            modelBuilder.Entity("Proje.Models.DemirbasZimmet", b =>
                {
                    b.HasOne("Proje.Models.Demirbas", "Demirbas")
                        .WithMany("DemirbasZimmet")
                        .HasForeignKey("DemirbasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.Personel", "DemirbasTesellum")
                        .WithMany("DemirbasZimmetTesellum")
                        .HasForeignKey("DemirbasTesellumSicil")
                        .IsRequired();

                    b.HasOne("Proje.Models.Personel", "DemirbasTeslim")
                        .WithMany("DemirbasZimmetTeslim")
                        .HasForeignKey("DemirbasTeslimSicil")
                        .IsRequired();

                    b.Navigation("Demirbas");

                    b.Navigation("DemirbasTesellum");

                    b.Navigation("DemirbasTeslim");
                });

            modelBuilder.Entity("Proje.Models.District", b =>
                {
                    b.HasOne("Proje.Models.Town", "Town")
                        .WithMany("District")
                        .HasForeignKey("TownID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Proje.Models.Neighborhood", b =>
                {
                    b.HasOne("Proje.Models.District", "District")
                        .WithMany("Neighborhood")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Proje.Models.Personel", b =>
                {
                    b.HasOne("Proje.Models.Buro", "Buro")
                        .WithMany("Personel")
                        .HasForeignKey("BuroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Models.Rutbe", "Rutbe")
                        .WithMany("Personel")
                        .HasForeignKey("RutbeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buro");

                    b.Navigation("Rutbe");
                });

            modelBuilder.Entity("Proje.Models.Town", b =>
                {
                    b.HasOne("Proje.Models.City", "City")
                        .WithMany("Town")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Proje.Models.Arac", b =>
                {
                    b.Navigation("AracBakim");

                    b.Navigation("AracKaza");

                    b.Navigation("AracSivilPlaka");

                    b.Navigation("AracZimmet");
                });

            modelBuilder.Entity("Proje.Models.AracAidiyet", b =>
                {
                    b.Navigation("Arac");
                });

            modelBuilder.Entity("Proje.Models.AracKategori", b =>
                {
                    b.Navigation("AracModel");
                });

            modelBuilder.Entity("Proje.Models.AracMarka", b =>
                {
                    b.Navigation("AracModel");
                });

            modelBuilder.Entity("Proje.Models.AracModel", b =>
                {
                    b.Navigation("Arac");
                });

            modelBuilder.Entity("Proje.Models.AracVitesTipi", b =>
                {
                    b.Navigation("Arac");
                });

            modelBuilder.Entity("Proje.Models.AracYakit", b =>
                {
                    b.Navigation("Arac");
                });

            modelBuilder.Entity("Proje.Models.Buro", b =>
                {
                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Proje.Models.City", b =>
                {
                    b.Navigation("Town");
                });

            modelBuilder.Entity("Proje.Models.Country", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Proje.Models.Demirbas", b =>
                {
                    b.Navigation("DemirbasZimmet");
                });

            modelBuilder.Entity("Proje.Models.DemirbasCinsi", b =>
                {
                    b.Navigation("Demirbas");
                });

            modelBuilder.Entity("Proje.Models.DemirbasMarka", b =>
                {
                    b.Navigation("DemirbasModel");
                });

            modelBuilder.Entity("Proje.Models.DemirbasModel", b =>
                {
                    b.Navigation("Demirbas");
                });

            modelBuilder.Entity("Proje.Models.District", b =>
                {
                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("Proje.Models.Personel", b =>
                {
                    b.Navigation("AracBakim");

                    b.Navigation("AracKaza");

                    b.Navigation("AracZimmetTesellum");

                    b.Navigation("AracZimmetTeslim");

                    b.Navigation("DemirbasZimmetTesellum");

                    b.Navigation("DemirbasZimmetTeslim");
                });

            modelBuilder.Entity("Proje.Models.Renk", b =>
                {
                    b.Navigation("Arac");
                });

            modelBuilder.Entity("Proje.Models.Rutbe", b =>
                {
                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Proje.Models.Town", b =>
                {
                    b.Navigation("District");
                });
#pragma warning restore 612, 618
        }
    }
}
